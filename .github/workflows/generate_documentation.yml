name: Generate Documentation with OpenAI and Update Wiki

on:
  repository_dispatch:
    types: [pull_request_merged]

jobs:
  generate_documentation:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2
      with:
        fetch-depth: 0  # Holt alle Commits

    - name: Ermittle die letzten drei Commits
      id: last_commits
      run: |
        LAST_COMMIT_SHA=$(git rev-parse HEAD)
        SECOND_LAST_COMMIT_SHA=$(git rev-parse HEAD~1)
        THIRD_LAST_COMMIT_SHA=$(git rev-parse HEAD~2)
        echo "LAST_COMMIT_SHA=$LAST_COMMIT_SHA" >> $GITHUB_ENV
        echo "SECOND_LAST_COMMIT_SHA=$SECOND_LAST_COMMIT_SHA" >> $GITHUB_ENV
        echo "THIRD_LAST_COMMIT_SHA=$THIRD_LAST_COMMIT_SHA" >> $GITHUB_ENV

    - name: Ermittle geänderte Dateien
      run: |
        CHANGED_FILES=""
        CHANGED_FILES+=$(git diff --name-only $THIRD_LAST_COMMIT_SHA $SECOND_LAST_COMMIT_SHA)
        CHANGED_FILES+=$(git diff --name-only $SECOND_LAST_COMMIT_SHA $LAST_COMMIT_SHA)
        CHANGED_FILES+=$(git diff --name-only $LAST_COMMIT_SHA HEAD)
        CHANGED_CONTENT=""
        for file in $CHANGED_FILES; do
          CHANGED_CONTENT+=$(printf "\n\n### Datei: $file\n\n")
          CHANGED_CONTENT+=$(cat $file)
        done
        ESCAPED_CONTENT=$(printf '%s' "$CHANGED_CONTENT" | jq -Rs .)
        echo "ESCAPED_CONTENT: $ESCAPED_CONTENT"

    - name: Send Content to OpenAI for Documentation
      run: |
        DOC_RESPONSE=$(jq -n \
                            --arg content "$ESCAPED_CONTENT" \
                            '{
                                "model": "gpt-4",
                                "messages": [
                                    {
                                        "role": "system",
                                        "content": "Du bist ein Software-Dokumentations-Experte. Erstelle eine Dokumentation basierend auf dem gegebenen Sourcecode. Erkläre dabei nicht den Inhalt vom Sourcecode selbst, sondern wie dieser Code verwendet werden kann. Antworte im Format GitHub Flavored Markdown (GFM)."
                                    },
                                    {
                                        "role": "user",
                                        "content": $content
                                    }
                                ],
                                "temperature": 1,
                                "max_tokens": 4096,
                                "top_p": 1,
                                "frequency_penalty": 0,
                                "presence_penalty": 0
                            }' | \
        curl -X POST https://api.openai.com/v1/chat/completions \
             -H "Content-Type: application/json" \
             -H "Authorization: Bearer ${{ secrets.OPENAI_API_KEY }}" \
             -d @-)
        
        DOCUMENTATION=$(echo $DOC_RESPONSE | jq -r .choices[0].message.content)

        # Erstellen eines Ordners für die Dokumentation
        mkdir documentation
        # Speichern der Dokumentation als Markdown-Datei
        echo "$DOCUMENTATION" > documentation/Home.md

    - name: Update Wiki with Documentation
      uses: docker://decathlon/wiki-page-creator-action:latest
      env:
        GH_PAT: ${{ secrets.GHPROJECT_TOKEN }}
        ACTION_MAIL: gregor.biswanger@web-enliven.de
        ACTION_NAME: GregorBiswanger
        OWNER: ${{ github.repository_owner }}
        REPO_NAME: ai-dev-process-sample
        MD_FOLDER: documentation
