name: Question Label Workflow

on:
  issues:
    types: [labeled]

jobs:
  handle_question:
    if: github.event.label.name == 'question'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.8'

      - name: Install Python Dependencies
        run: |
          pip install beautifulsoup4 requests transformers torch

      - name: Fetch and Summarize Wiki Content
        id: wiki_summary
        run: |
          summary=$(python .github/workflows/summarize_wiki.py)
          echo "SUMMARY=${summary}" >> $GITHUB_ENV
        shell: bash
  
      - name: Get Commit Message
        id: get_commit
        run: |
          commit_message=$(git log -1 --pretty=%B)
          echo "Commit Message: $commit_message"
          echo "COMMIT_MESSAGE=${commit_message}" >> $GITHUB_ENV

      - name: Send Commit Message and Wiki Summary to OpenAI
        id: openai_response
        run: |
          ESCAPED_CONTENT=$(printf '%s' "$COMMIT_MESSAGE" | jq -Rs .)
          WIKI_SUMMARY="$SUMMARY"
          echo "Escaped Content: $ESCAPED_CONTENT"
          echo "Wiki Summary: $WIKI_SUMMARY"

          RESPONSE=$(jq -n \
                          --arg content "$ESCAPED_CONTENT" \
                          --arg summary "$WIKI_SUMMARY" \
                          '{
                              "model": "gpt-4",
                              "messages": [
                                  {
                                      "role": "system",
                                      "content": "Du bist ein Softwareentwickler. Die folgende Frage kommt aus einem Issue von GitHub zu unserem Beispielprojekt. Versuche die Frage basierend auf der Zusammenfassung der Wiki-Seite zu beantworten: " + $summary + ". Wenn die notwendigen Informationen nicht enthalten sind, antworte mit ausschlieÃŸlich an den User @GregorBiswanger und frage ihn ob er hierbei helfen kann."
                                  },
                                  {
                                      "role": "user",
                                      "content": $content
                                  }
                              ],
                              "temperature": 1,
                              "max_tokens": 4096,
                              "top_p": 1,
                              "frequency_penalty": 0,
                              "presence_penalty": 0
                          }' | \
          curl -X POST https://api.openai.com/v1/chat/completions \
               -H "Content-Type: application/json" \
               -H "Authorization: Bearer ${{ secrets.OPENAI_API_KEY }}" \
               -d @-)
          
          ANSWER=$(echo $RESPONSE | jq -r .choices[0].message.content)
          echo "Answer: $ANSWER"
          echo "ANSWER=${ANSWER}" >> $GITHUB_ENV

      - name: Check Response and Comment on Issue
        uses: actions/github-script@v3
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const issueNumber = context.issue.number;
            const responseText = process.env.ANSWER;
            let commentBody = '';

            github.issues.createComment({
              issue_number: issueNumber,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: responseText
            });
