name: OpenAI Code Review on Pull Request

on:
  pull_request:
    types: [opened, synchronize]

jobs:
  review_code:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Send code to OpenAI for review
      id: openai_review
      run: |
        git fetch origin
        PR_BODY="${{ github.event.pull_request.body }}"
        PR_TITLE="${{ github.event.pull_request.title }}"
        
        # Extrahieren Sie die Liste der geänderten Dateien
        CHANGED_FILES=$(git diff --name-only ${{ github.event.pull_request.base.sha }} ${{ github.event.pull_request.head.sha }})
        
        # Extrahieren Sie den Inhalt der geänderten Dateien
        FILE_CONTENTS=""
        for file in $CHANGED_FILES; do
          FILE_CONTENTS+="$file:\n\n$(cat $file)\n\n"
        done
        
        ESCAPED_CONTENT=$(printf '%s' "$FILE_CONTENTS" | jq -Rs .)
        echo "ESCAPED_CONTENT: $ESCAPED_CONTENT"
        REVIEW_RESPONSE=$(curl https://api.openai.com/v1/chat/completions \
          -H "Content-Type: application/json" \
          -H "Authorization: Bearer ${{ secrets.OPENAI_API_KEY }}" \
          -d '{
            "model": "gpt-4",
            "messages": [
              {
                "role": "system",
                "content": "Du bist Developer Security Experte und Developer Performance Experte. Analysiere den geänderten Sourcecode. Beschreibe ausführlich, was für Probleme du finden konntest die deine Schwerpunkte betreffen. Zeige zusätzlich einen Lösungsweg. Wenn du keine Probleme oder Auffälligkeiten gefunden hast, antworte ausschließlich mit Der Code gefällt mir."
              },
              {
                "role": "user",
                "content": "$ESCAPED_CONTENT"
              }
            ],
            "temperature": 1,
            "max_tokens": 256,
            "top_p": 1,
            "frequency_penalty": 0,
            "presence_penalty": 0
          }')
        
        REVIEW_MESSAGE=$(echo $REVIEW_RESPONSE | jq -r .choices[0].message.content | tr -d '\n')
        echo "REVIEW_MESSAGE=$REVIEW_MESSAGE" >> $GITHUB_ENV
        if [ -z "$REVIEW_MESSAGE" ]; then
          REVIEW_MESSAGE="Es gab ein Problem bei der Überprüfung des Codes durch OpenAI. Bitte überprüfen Sie manuell."
        fi

    - name: Comment on PR with OpenAI's review
      uses: actions/github-script@v3
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const prNumber = ${{ github.event.pull_request.number }};
          const reviewMessage = process.env.REVIEW_MESSAGE;
          github.issues.createComment({
            issue_number: prNumber,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: reviewMessage
          });

    - name: Merge PR if review is positive
      if: contains(env.REVIEW_MESSAGE, 'Der Code gefällt mir.') # Adjust this condition based on OpenAI's typical positive responses
      uses: actions/github-script@v3
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const prNumber = ${{ github.event.pull_request.number }};
          github.pulls.merge({
            pull_number: prNumber,
            owner: context.repo.owner,
            repo: context.repo.repo
          });
