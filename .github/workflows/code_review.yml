name: OpenAI Code Review on Pull Request

on:
  pull_request:
    types: [opened, synchronize]

jobs:
  review_code:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Send code to OpenAI for review
      id: openai_review
      run: |
        git fetch origin
        CODE_DIFF=$(git diff ${{ github.event.pull_request.base.sha }} ${{ github.event.pull_request.head.sha }} --unified=0)
        ESCAPED_CONTENT=$(printf '%s' "$CODE_DIFF" | jq -Rs .)
        echo "ESCAPED_CONTENT: $ESCAPED_CONTENT"
        
        REVIEW_RESPONSE=$(jq -n \
                            --arg content "$ESCAPED_CONTENT" \
                            '{
                                "model": "gpt-4",
                                "messages": [
                                    {
                                        "role": "system",
                                        "content": "Du bist Developer Security Experte und Developer Performance Experte. Analysiere den geänderten Sourcecode. Beschreibe ausführlich, was für Probleme du finden konntest die deine Schwerpunkte betreffen. Zeige zusätzlich einen Lösungsweg. Wenn du keine Probleme oder Auffälligkeiten gefunden hast, antworte ausschließlich exakt mit dem Text: Ich gebe den PR frei. Bei keinen ernsthaften Problemen, füge am Ende von deiner Antwort den exakt den Text: Ich gebe den PR frei. Wenn ernsthafte schwierigkeiten entdeckt wurden, schreibe auf keinen Fall den Text: Ich gebe den PR frei. Antworte im Format GitHub Flavored Markdown (GFM) und halte die Antwort kurz."
                                    },
                                    {
                                        "role": "user",
                                        "content": $content
                                    }
                                ],
                                "temperature": 1,
                                "max_tokens": 4096,
                                "top_p": 1,
                                "frequency_penalty": 0,
                                "presence_penalty": 0
                            }' | \
        curl -X POST https://api.openai.com/v1/chat/completions \
             -H "Content-Type: application/json" \
             -H "Authorization: Bearer ${{ secrets.OPENAI_API_KEY }}" \
             -d @-)
        
        REVIEW_MESSAGE=$(echo $REVIEW_RESPONSE | jq -r .choices[0].message.content)
        echo "REVIEW_MESSAGE=$REVIEW_MESSAGE" >> $GITHUB_ENV
        if [ -z "$REVIEW_MESSAGE" ]; then
          REVIEW_MESSAGE="Es gab ein Problem bei der Überprüfung des Codes durch OpenAI. Bitte überprüfen Sie manuell."
        fi

    - name: Comment on PR with OpenAI's review
      uses: actions/github-script@v3
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const prNumber = ${{ github.event.pull_request.number }};
          const reviewMessage = process.env.REVIEW_MESSAGE;
          github.issues.createComment({
            issue_number: prNumber,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: reviewMessage
          });

    - name: Merge PR if review is positive
      if: contains(env.REVIEW_MESSAGE, 'Ich gebe den PR frei') # Adjust this condition based on OpenAI's typical positive responses
      uses: actions/github-script@v3
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const prNumber = ${{ github.event.pull_request.number }};
          github.pulls.merge({
            pull_number: prNumber,
            owner: context.repo.owner,
            repo: context.repo.repo
          });